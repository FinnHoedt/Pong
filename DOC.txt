/**
* Initialisiert alle Screens des Games und startet den ersten Screen des Spieles.
*
*@author MIB-D
*@version 1.0
*/
public class Pong extends ScreenBasedGame {
	/**
    *Diese Methode initialisiert das Spiel und richtet den initialen Spielstatus
    *und alle benoetigten Ressources ein.
    */
	@Override
    public void initialise();

    /**
    *Gibt die ID des ersten Screens wieder.
    *@return int ID des ersten Screens
    */
    @Override
    public int getInitialScreenId();
}



/**
*Interface for GameObjects
*@author MIB-D
*@version 1.0\
*/
public class GameObject {
    /**
    *Die update-Methode wird verwendet, um den internen Zustand eines Objekts zu aktualisieren.
    *Dies kann das Modifizieren von Instanzvariablen, das Durchf√ºhren von Berechnungen oder andere Aufgaben beinhalten,
    *die erforderlich sind, um das Objekt in einem konsistenten Zustand zu halten.
    *@param dt Die seit dem letzten Update verstrichene Zeit in Sekunden
    */
    public void update(double dt);


    /**
    *Diese Methode interpoliiert den Spielstatus zwischen dem vorherigen und aktuellen
    *Update, um Inkonsistenzen oder "Jitter" in der Animation des Spiels zu glaetten.
    *@param alpha Der Interpolationsfaktor, ein Wert zwischen 0 und 1, der den Prozentsatz des Weges
    *             zwischen dem vorherigen und aktuellen Update darstellt.
    */
    public void interpolate(double alpha);

    /**
    *
    *Diese Methode initialisiert das Spiel und richtet den initialen Spielstatus
    *und alle benoetigten Ressources ein.
    */
    public void initialize();


    /**
    *Diese Methode rendert den aktuellen Spielstatus auf den Bildschrim.
    *@param g Der Grafikkontext, der verwendet wird, um das Spiel zu rendern. Dieser kann
    */
    public void render(Graphics2D g);

}

/**
*Spielball und enhaelt Methoden, um Score und PowerUps zuzuordnen.
*/
public class Ball extends GameObject {}

/**
*Oberklasse der jeweiligen Platformen
*/
public class Platform extends GameObject {}

/**
*Rechte Platform und implementiert die Steuerung mit W und S
*/
public class RightPlaform extends Platform {}

/**
*Linke Platform und implementiert die Steuerung mit Pfeil-Oben und Pfeil-Unten
*/
public class LeftPlatform extends Platform {}

/**
*Oberklasse der jeweiligen PowerUps
*/
public class PowerUp extends GameObject {}

/**
*Implementiert das PowerUp BallSplit, bei dem der Ball in zwei kleinere Baelle gesplittet wird.
*/
public class BallSplit extends PowerUp {}

/**
*Implementiert das PowerUp BiggerPlatform, bei dem die Plattform, die zuletzt den Ball beruehrt hat, eine
*groessere Plattform bekommt.
*/
public class BiggerPlatform extends PowerUp {}

/**
*Implementiert das PowerUp Flash, bei dem die Geschwindigkeit des Balls erhoeht wird.
*/
public class Flash extends extends PowerUp {}

/**
*Realisiert das zaehlen und das darstellen des Scores
*/
public class Score extends GameObject {}






